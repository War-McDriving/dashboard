import dash
from dash import dcc, html, dash_table
import pandas as pd
import folium
from folium.plugins import HeatMap
from geopy.geocoders import Nominatim

# Load data with only Antwerp coordinates
data = pd.DataFrame({
    'latitude': [
        51.217314677,51.217300321,51.217281075,51.217304211,51.217311207,51.217312977,51.217293555,51.21729313,51.217278791,51.217250427,51.217237252,51.217227213,51.217189535,51.217209873,51.217250589,51.21731076,51.217292989,51.217294955,51.217301255,51.217293905,51.217291666,51.217326973,51.217296872,51.217282862,51.217317347,51.217270636,51.217273499,51.217262362,51.217255979,51.217101037,51.217047154,51.217047624,51.21703624,51.217015516,51.217081093,51.217074949,51.217091344,51.217051984,51.217206629,51.21726526,51.217317345,51.217427454,51.217496786,51.217596631,51.217626406,51.217680646,51.217708264,51.217717792,51.217741681,51.217750228,51.217746416,51.21778166,51.217769788,51.217809662,51.217824735,51.217911622,51.218036389,51.218092157,51.218119941,51.218135223,51.218127678,51.218146098,51.218131448,51.218145318,51.218152136,51.218139462,51.218147869,51.218202246,51.218142091,51.218181076,51.218208025,51.2182386,51.218208072,51.218273798,51.218289221,51.218334568,51.218305315,51.218311356,51.218278624,51.218297245,51.218259678,51.218216521,51.218199479,51.218117615,51.21807108,51.217995913,51.218005202,51.217983541,51.217990458,51.217980148,51.217986587,51.217964726,51.217961435,51.218014412,51.218040649,51.218086532,51.218068261,51.218061572,51.218139372,51.21811652,51.218117585,51.218150979,51.218203773,51.218177938,51.218142491,51.218126493,51.218119813,51.218109225,51.218092901,51.218129929,51.21811391,51.21812179,51.218139049,51.218184933,51.218257562,51.218251555,51.21823502,51.218207088,51.218259765,51.218300004,51.218303449,51.218295389,51.218282741,51.218272919,51.218289082,51.218332844,51.218424425,51.218545486,51.218550203,51.218555584,51.218561587,51.218564655,51.218470254,51.218486884,51.21850592,51.218507803,51.218496316,51.218446738,51.218478793,51.218389875,51.218527222,51.218537631,51.218580578,51.218522702,51.218614918,51.21851713,51.218545673,51.218692727,51.218679517,51.218527542,51.217982326,51.217659,51.217252471,51.216955538,51.216703082,51.216678475,51.216804113,51.216886406,51.216886406,51.208085929,51.212421858,51.213255567,51.21198395,51.212467653,51.212795313,51.212786205,51.212833108,51.212710696,51.212711836,51.212687656,51.21268045,51.212484224,51.212132759,51.211736232,51.21119425,51.210676754,51.210106486,51.209444603,51.209050018,51.208912099,51.208898461,51.208770686,51.208341644,51.207815687,51.207543809,51.207370891,51.207157838,51.206911432,51.206578174,51.20637373,51.206288872,51.205906914,51.205473453,51.205332731,51.205230054,51.205054315,51.204825248,51.204548153,51.204392454,51.204433398,51.204203551,51.20382476,51.203594314,51.20319817,51.202513711,51.201944188,51.201863714,51.201910533,51.201367049,51.201332006,51.201216315,51.200908944
    ],
    'longitude': [
        4.41918433,4.41904055,4.418940653,4.418932976,4.418912388,4.41892909,4.418934465,4.418943832,4.418901032,4.418944951,4.41892044,4.418885244,4.418852216,4.418884809,4.418895295,4.418952056,4.418961387,4.418951933,4.418943235,4.418927681,4.41895567,4.418882084,4.418881127,4.41890149,4.418917798,4.418913329,4.41891976,4.418962843,4.419006287,4.419110896,4.419110389,4.419073033,4.418904062,4.418782541,4.41865307,4.41851328,4.418325041,4.418214021,4.418077824,4.41793075,4.417761855,4.417648065,4.417513691,4.417309484,4.417175071,4.417095409,4.416924853,4.416718393,4.4166189,4.416480965,4.41632119,4.416148033,4.416033635,4.415898403,4.415739211,4.415554919,4.415312077,4.415093933,4.414968527,4.414903812,4.414838972,4.414622027,4.414426173,4.414289956,4.414147584,4.414002042,4.413783644,4.41363767,4.413451721,4.413236495,4.413078197,4.412918039,4.412728827,4.412582895,4.412531225,4.412290048,4.412067822,4.411942974,4.411772237,4.411559073,4.411396188,4.411235345,4.411081955,4.410948341,4.410782229,4.410633218,4.410471717,4.410369784,4.410197847,4.409999773,4.4098888,4.409745403,4.409598844,4.409438671,4.40926639,4.409059527,4.408918441,4.408729304,4.408550458,4.408383306,4.408180204,4.408084607,4.407882779,4.407775751,4.407602078,4.407415679,4.407312949,4.407139086,4.406988259,4.40678643,4.40659572,4.406452257,4.406273176,4.406112367,4.405947062,4.405808869,4.405699385,4.405552445,4.405461679,4.405248965,4.405110474,4.404996151,4.404873911,4.404785717,4.404668216,4.404637276,4.404716202,4.404752686,4.404695574,4.404566907,4.404126643,4.403715842,4.403516649,4.403254573,4.403044825,4.402905592,4.402767882,4.402560034,4.40243012,4.402090269,4.401978978,4.401921489,4.401838667,4.401662961,4.401297302,4.401055259,4.401027772,4.4008601,4.400894217,4.400757838,4.400592124,4.40048032,4.400049456,4.39955397,4.399426733,4.399389092,4.399232356,4.399142148,4.399232356,4.402959565,4.399364642,4.39806544,4.398792865,4.398206193,4.397775076,4.397758877,4.397666129,4.397568194,4.397457589,4.397404773,4.397412368,4.397278533,4.397055528,4.396416888,4.395859795,4.395176068,4.394506291,4.393808618,4.393385514,4.393396956,4.393358015,4.393150216,4.392547207,4.391877794,4.391657825,4.391231943,4.390910374,4.390791953,4.390332293,4.390192522,4.390176175,4.38972519,4.389198286,4.389051888,4.388780436,4.388288949,4.387946261,4.388099378,4.38823705,4.388196548,4.388320349,4.388571284,4.388983295,4.389439959,4.390030191,4.390537904,4.390717297,4.390784315,4.39081745,4.391089098,4.391297587,4.391513225
    ],
    'signal_strength': [
        -7,93,63,-12,26,55,59,-62,89,-95,94,57,-98,-48,30,-70,1,54,25,76,30,-77,80,71,88,-8,-15,-37,59,-64,-18,-60,0,-57,-93,-57,-26,-64,-65,51,-72,-31,85,18,-44,-70,-35,-14,67,-94,46,86,-35,-79,-99,-59,37,28,-51,9,39,-26,-79,9,-41,75,7,-22,-70,16,56,-67,62,-81,21,-9,-9,100,97,73,56,-20,18,34,10,45,-33,-82,-89,47,32,19,-80,-9,-24,82,-92,-75,-54,70,53,50,-38,22,-42,30,99,-81,18,-29,29,24,29,-76,20,95,49,13,-71,-1,-5,-32,-51,-25,-27,97,-40,83,-15,35,-90,68,-19,-68,49,-68,23,88,47,81,77,7,0,-88,40,-9,-19,35,50,-23,-74,41,85,42,-74,-32,37,98,-47,-70,-51,85,-42,-39,-54,-83,35,30,-15,30,95,35,-6,-53,39,44,87,51,98,-65,6,82,-15,-92,83,-98,38,69,-53,-5,-37,75,40,90,-94,-55,37,-53,47,46,10,50,60,80,70,60,54,40,30,100,126,21 
    ]
})

# Geocode the coordinates to get the street address
geolocator = Nominatim(user_agent="geoapiExercises")

def get_address(lat, lon):
    location = geolocator.reverse((lat, lon), language='en', timeout=10)
    if location:
        return location.address
    return "Unknown"

# Create a function to generate the heatmap
def generate_heatmap(data):
    m = folium.Map(location=[data['latitude'].mean(), data['longitude'].mean()], zoom_start=10)
    heat_data = [[row['latitude'], row['longitude'], row['signal_strength']] for _, row in data.iterrows()]
    HeatMap(heat_data, min_opacity=0.5, max_val=data['signal_strength'].max(), radius=15, blur=10).add_to(m)

    # Save map to an HTML file
    file_path = "map.html"
    m.save(file_path)
    return file_path

# Initialize Dash app
app = dash.Dash(__name__)

# Generate the initial heatmap
map_path = generate_heatmap(data)


# Layout
app.layout = html.Div([
    html.H1("War McDriving Heatmap Dashboard"),
    html.Iframe(id="map", srcDoc=open(map_path, "r").read(), width="100%", height="600"),
    
    # Add a DataTable to show the coordinates and street addresses
    dash_table.DataTable(
        id='coordinates-table',
        columns=[
            {'name': 'Latitude', 'id': 'latitude'},
            {'name': 'Longitude', 'id': 'longitude'},
            {'name': 'Signal Strength', 'id': 'signal_strength'},
            {'name': 'Street Address', 'id': 'address'}
        ],
        data=data.to_dict('records'),
        style_table={'height': '350px', 'overflowY': 'auto'}
    )
])

# Run the app
if __name__ == "__main__":
    app.run_server(debug=True)
